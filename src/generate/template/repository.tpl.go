// Code generated by hero.
// source: D:\GoProjects\github.com/anden007/afocus-godf\Backend\src\generate\template\repository.tpl
// DO NOT EDIT!
package template

import "bytes"

func Repository(pkgCode string, model string, hasCreateTime bool, buffer *bytes.Buffer) {
	buffer.WriteString(`
package repository_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`

import (
	"github.com/anden007/afocus-godf/src/interfaces"
	"github.com/anden007/afocus-godf/src/lib"
	"github.com/anden007/afocus-godf/src/model/model_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`"
	"github.com/google/uuid"
`)
	if hasCreateTime {
		buffer.WriteString(`
	"time"
`)
	}
	buffer.WriteString(`
)

type `)
	buffer.WriteString(model)
	buffer.WriteString(`Repository struct{}

func New`)
	buffer.WriteString(model)
	buffer.WriteString(`Repository() *`)
	buffer.WriteString(model)
	buffer.WriteString(`Repository {
	instance := new(`)
	buffer.WriteString(model)
	buffer.WriteString(`Repository)
	return instance
}

func (m *`)
	buffer.WriteString(model)
	buffer.WriteString(`Repository) Add(entity model_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`.`)
	buffer.WriteString(model)
	buffer.WriteString(`) (err error) {
	db := interfaces.DI().GetDataBase()
`)
	if hasCreateTime {
		buffer.WriteString(`
    if entity.CreateTime.IsZero(){
        entity.CreateTime = time.Now()
    }
`)
	}
	buffer.WriteString(`
	err = db.GetDB().Create(&entity).Error
	return
}

func (m *`)
	buffer.WriteString(model)
	buffer.WriteString(`Repository) Edit(entity model_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`.`)
	buffer.WriteString(model)
	buffer.WriteString(`) (err error) {
	db := interfaces.DI().GetDataBase()
	err = db.GetDB().Save(&entity).Error
	return
}

func (m *`)
	buffer.WriteString(model)
	buffer.WriteString(`Repository) DelByIds(ids []uuid.UUID ) (err error) {
	db := interfaces.DI().GetDataBase()
	err = db.GetDB().Delete(model_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`.`)
	buffer.WriteString(model)
	buffer.WriteString(`{}, "id in (?)", ids).Error
	return
}

func (m *`)
	buffer.WriteString(model)
	buffer.WriteString(`Repository) GetById(id uuid.UUID) (result model_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`.`)
	buffer.WriteString(model)
	buffer.WriteString(`, err error) {
	db := interfaces.DI().GetDataBase()
	err = db.GetDB().Model(&model_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`.`)
	buffer.WriteString(model)
	buffer.WriteString(`{}).Where(&model_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`.`)
	buffer.WriteString(model)
	buffer.WriteString(`{Id:id}).First(&result).Error
	return
}

func (m *`)
	buffer.WriteString(model)
	buffer.WriteString(`Repository) GetAll() (result []model_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`.`)
	buffer.WriteString(model)
	buffer.WriteString(`, err error) {
	db := interfaces.DI().GetDataBase()
	err = db.GetDB().Model(&model_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`.`)
	buffer.WriteString(model)
	buffer.WriteString(`{}).Find(&result).Error
	return
}

func (m *`)
	buffer.WriteString(model)
	buffer.WriteString(`Repository) Updates(id uuid.UUID , fieldValues map[string]interface{}) (err error) {
	db := interfaces.DI().GetDataBase()
	err = db.GetDB().Model(&model_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`.`)
	buffer.WriteString(model)
	buffer.WriteString(`{}).Where(model_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`.`)
	buffer.WriteString(model)
	buffer.WriteString(`{Id: id}).Updates(fieldValues).Error
	return
}

func (m *`)
	buffer.WriteString(model)
	buffer.WriteString(`Repository) GetByCondition(condition map[string]string) (result []model_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`.`)
	buffer.WriteString(model)
	buffer.WriteString(`, total int64, err error) {
	db := interfaces.DI().GetDataBase()
	Query := db.GetDB().Model(model_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`.`)
	buffer.WriteString(model)
	buffer.WriteString(`{})
	CountQuery := db.GetDB().Model(model_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`.`)
	buffer.WriteString(model)
	buffer.WriteString(`{})
	err = lib.NewQueryCondition().GetQuery(model_`)
	buffer.WriteString(pkgCode)
	buffer.WriteString(`.`)
	buffer.WriteString(model)
	buffer.WriteString(`{}.TableName(), condition, Query, CountQuery)
	if err == nil {
		err = CountQuery.Count(&total).Error
		err = Query.Find(&result).Error
	}
	return
}`)

}
