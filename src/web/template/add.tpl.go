// Code generated by hero.
// source: D:\GoProjects\github.com/anden007/afocus-godf\Backend\src\web\template\add.tpl
// DO NOT EDIT!
package template

import (
	"bytes"
	"github.com/anden007/afocus-godf/src/web/view_model/generator"
)

type AddOption struct {
	RowNum          int
	ItemWidth       string
	Width           string
	WangEditorWidth string
	QuillWidth      string
	ApiName         string
	Api             bool
	Upload          bool
	UploadThumb     bool
	WangEditor      bool
	Quill           bool
	Password        bool
}

func Add(fields []generator.Field, options AddOption, buffer *bytes.Buffer) {
	buffer.WriteString(`
<template>
  <div>
    <Card>
      <div slot="title">
        <div class="edit-head">
          <a @click="close" class="back-title">
            <Icon type="ios-arrow-back" />返回
          </a>
          <div class="head-name">添加</div>
          <span></span>
          <a @click="close" class="window-close">
            <Icon type="ios-close" size="31" class="ivu-icon-ios-close" />
          </a>
        </div>
      </div>
      <Form ref="form" :model="form" :label-width="100" :rules="formValidate" label-position="left" `)
	if options.RowNum > 1 {
		buffer.WriteString(`inline`)
	}
	buffer.WriteString(`>
          `)

	for _, item := range fields {
		if item.Editable {

			buffer.WriteString(`
          <FormItem label="`)
			buffer.WriteString(item.Name)
			buffer.WriteString(`" prop="`)
			buffer.WriteString(item.Field)
			buffer.WriteString(`" `)
			if options.RowNum > 1 && (item.Type == "switch" || item.Type == "radio") {
				buffer.WriteString(`style="width:`)
				buffer.WriteString(options.ItemWidth)
				buffer.WriteString(`"`)
			}
			if item.Type == "wangEditor" || item.Type == "quill" {
				buffer.WriteString(`class="form-`)
				buffer.WriteString(item.Type)
				buffer.WriteString(`"`)
			}
			buffer.WriteString(`>
            `)

			if item.Type == "text" {

				buffer.WriteString(`
            <Input v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable style="width:`)
				buffer.WriteString(options.Width)
				buffer.WriteString(`"/>
            `)

			}

			if item.Type == "select" {

				buffer.WriteString(`
            <Select v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable style="width:`)
				buffer.WriteString(options.Width)
				buffer.WriteString(`">
              <Option value="0">请自行编辑下拉菜单</Option>
            </Select>
            `)

			}

			if item.Type == "switch" {

				buffer.WriteString(`
            <i-switch v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`"></i-switch>
            `)

			}

			if item.Type == "radio" {

				buffer.WriteString(`
            <RadioGroup v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`">
              <Radio label="0">请自行编辑单选框</Radio>
              <Radio label="1">请自行编辑单选框</Radio>
            </RadioGroup>
            `)

			}

			if item.Type == "number" {

				buffer.WriteString(`
            <InputNumber v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" style="width:`)
				buffer.WriteString(options.Width)
				buffer.WriteString(`"></InputNumber>
            `)

			}

			if item.Type == "date" {

				buffer.WriteString(`
            <DatePicker type="date" v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable style="width:`)
				buffer.WriteString(options.Width)
				buffer.WriteString(`"></DatePicker>
            `)

			}

			if item.Type == "daterange" {

				buffer.WriteString(`
            <DatePicker type="daterange" v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable style="width:`)
				buffer.WriteString(options.Width)
				buffer.WriteString(`"></DatePicker>
            `)

			}

			if item.Type == "time" {

				buffer.WriteString(`
            <TimePicker type="time" v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" clearable style="width:`)
				buffer.WriteString(options.Width)
				buffer.WriteString(`"></TimePicker>
            `)

			}

			if item.Type == "area" {

				buffer.WriteString(`
            <al-cascader v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" data-type="code" level="`)
				buffer.WriteString(item.Level)
				buffer.WriteString(`" style="width:`)
				buffer.WriteString(options.Width)
				buffer.WriteString(`"/>
            `)

			}

			if item.Type == "slider" {

				buffer.WriteString(`
            <Slider v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" style="width:`)
				buffer.WriteString(options.Width)
				buffer.WriteString(`"></Slider>
            `)

			}

			if item.Type == "upload" {

				buffer.WriteString(`
            <upload-pic-input v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" style="width:`)
				buffer.WriteString(options.Width)
				buffer.WriteString(`"></upload-pic-input>
            `)

			}

			if item.Type == "uploadThumb" {

				buffer.WriteString(`
            <uploadThumb v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" multiple style="width:`)
				buffer.WriteString(options.Width)
				buffer.WriteString(`"></uploadThumb>
            `)

			}

			if item.Type == "wangEditor" {

				buffer.WriteString(`
            <wangEditor v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" style="width:`)
				buffer.WriteString(options.WangEditorWidth)
				buffer.WriteString(`"></wangEditor>
            `)

			}

			if item.Type == "quill" {

				buffer.WriteString(`
            <quill v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" style="width:`)
				buffer.WriteString(options.QuillWidth)
				buffer.WriteString(`"></quill>
            `)

			}

			if item.Type == "password" {

				buffer.WriteString(`
            <password v-model="form.`)
				buffer.WriteString(item.Field)
				buffer.WriteString(`" style="width:`)
				buffer.WriteString(options.Width)
				buffer.WriteString(`"></password>
            `)

			}

			buffer.WriteString(`
          </FormItem>
          `)

		}
	}

	buffer.WriteString(`
          <Form-item class="br">
            <Button
              @click="handleSubmit"
              :loading="submitLoading"
              type="primary"
            >提交并保存</Button>
            <Button @click="handleReset">重置</Button>
            <Button type="dashed" @click="close">关闭</Button>
          </Form-item>
        </Form>
    </Card>
  </div>
</template>

<script>
`)

	if options.Api {

		buffer.WriteString(`
// 根据你的实际请求api.js位置路径修改
import { add`)
		buffer.WriteString(options.ApiName)
		buffer.WriteString(` } from "@/api/index";
import moment from "moment";
`)

	}

	if options.Upload {

		buffer.WriteString(`
import uploadPicInput from "@/views/my-components/xboot/upload-pic-input";
`)

	}

	if options.UploadThumb {

		buffer.WriteString(`
import uploadThumb from "@/views/my-components/xboot/upload-pic-thumb";
`)

	}

	if options.WangEditor {

		buffer.WriteString(`
import wangEditor from "@/views/my-components/xboot/editor";
`)

	}

	if options.Quill {

		buffer.WriteString(`
import quill from "@/views/my-components/xboot/quill";
`)

	}

	if options.Password {

		buffer.WriteString(`
import password from "@/views/my-components/xboot/set-password";
`)

	}

	buffer.WriteString(`
export default {
  name: "add",
  components: {
      `)

	if options.Upload {

		buffer.WriteString(`
      uploadPicInput,
      `)

	}

	if options.UploadThumb {

		buffer.WriteString(`
      uploadThumb,
      `)

	}

	if options.WangEditor {

		buffer.WriteString(`
      wangEditor,
      `)

	}

	if options.Quill {

		buffer.WriteString(`
      quill,
      `)

	}

	if options.Password {

		buffer.WriteString(`
      password,
      `)

	}

	buffer.WriteString(`
    },
  data() {
    return {
      submitLoading: false, // 表单提交状态
      form: { // 添加或编辑表单对象初始化数据
        `)

	for _, item := range fields {
		if item.Editable {

			if item.Type == "switch" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: true,
        `)
			} else if item.Type == "number" || item.Type == "slider" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: 0,
        `)
			} else if item.Type == "area" || item.Type == "uploadThumb" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [],
        `)
			} else {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: "",
        `)
			}

		}
	}

	buffer.WriteString(`
      },
      // 表单验证规则
      formValidate: {
        `)

	for _, item := range fields {
		if item.Editable && item.Validate {

			if item.Type == "daterange" || item.Type == "area" || item.Type == "uploadThumb" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ type: "array", required: true, message: "不能为空", trigger: "blur" }],
        `)
			} else if item.Type == "date" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ required: true, message: "不能为空", trigger: "blur", pattern: /.+/ }],
        `)
			} else if item.Type == "number" || item.Type == "slider" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ type: "number", required: true, message: "不能为空", trigger: "blur" }],
        `)
			} else if item.Type == "switch" {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ type: "boolean", required: true, message: "不能为空", trigger: "blur" }],
        `)
			} else {
				buffer.WriteString(item.Field)
				buffer.WriteString(`: [{ required: true, message: "不能为空", trigger: "blur" }],
        `)
			}

		}
	}

	buffer.WriteString(`
      }
    };
  },
  methods: {
    init() {},
    handleReset() {
      this.$refs.form.resetFields();
    },
    handleSubmit() {
      this.$refs.form.validate(valid => {
        if (valid) {
        `)
	for _, item := range fields {
		if item.Type == "date" {
			buffer.WriteString(`
          this.form.`)
			buffer.WriteString(item.Field)
			buffer.WriteString(` = moment(this.form.`)
			buffer.WriteString(item.Field)
			buffer.WriteString(`).format("YYYY-MM-DD HH:mm:ss");
        `)
		}
	}

	if options.Api {

		buffer.WriteString(`
            add`)
		buffer.WriteString(options.ApiName)
		buffer.WriteString(`(this.form).then(res => {
            this.submitLoading = false;
            if (res.success) {
              this.$Message.success("操作成功");
              this.submited();
            }
          });
          `)

	} else {

		buffer.WriteString(`
          // this.postRequest("请求路径", this.form).then(res => {
          //   this.submitLoading = false;
          //   if (res.success) {
          //     this.$Message.success("添加成功");
          //     this.submited();
          //   }
          // });
          // 模拟成功
          this.submitLoading = false;
          this.$Message.success("添加成功");
          this.submited();
          `)

	}

	buffer.WriteString(`
        }
      });
    },
    close() {
      this.$emit("close", true);
    },
    submited() {
      this.$emit("submited", true);
    }
  },
  mounted() {
    this.init();
  }
};
</script>
<style lang="less">
// 建议引入通用样式 具体路径自行修改 可删除下面样式代码
// @import "../../../styles/single-common.less";
.edit-head {
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: relative;

    .back-title {
        color: #515a6e;
        display: flex;
        align-items: center;
    }

    .head-name {
        display: inline-block;
        height: 20px;
        line-height: 20px;
        font-size: 16px;
        color: #17233d;
        font-weight: 500;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .window-close {
        z-index: 1;
        font-size: 12px;
        position: absolute;
        right: 0px;
        top: -5px;
        overflow: hidden;
        cursor: pointer;

        .ivu-icon-ios-close {
            color: #999;
            transition: color .2s ease;
        }
    }

    .window-close .ivu-icon-ios-close:hover {
        color: #444;
    }
}
</style>`)

}
